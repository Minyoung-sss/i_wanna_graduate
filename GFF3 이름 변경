#gff3 name 변경, 이전에는 evm~~ 이엿는데 지금 이제 OSGG01g 로 바꿈
#그리고 gene은 그대로 두고 mrna 부터 이름 OSGG01t로 바꿈

#python3
import re
from collections import defaultdict

import re
from collections import defaultdict

def update_gff3_ids(input_lines):
    updated_lines = []
    id_map = {}  # Mapping of old IDs to new IDs
    children_count = defaultdict(int)  # Count children per parent
    name_count = {}  # Track suffix counts for Name (.1, .2, etc.)

    # First pass: Count children per parent
    for line in input_lines:
        if line.startswith("#") or not line.strip():
            continue

        columns = line.strip().split("\t")
        attributes = columns[8]
        attributes_dict = dict(
            [attr.split("=") for attr in attributes.split(";") if "=" in attr]
        )

        if "Parent" in attributes_dict:
            parent_id = attributes_dict["Parent"]
            children_count[parent_id] += 1

    # Second pass: Update IDs
    for line in input_lines:
        if line.startswith("#") or not line.strip():
            # Keep comments and empty lines as is
            updated_lines.append(line)
            continue

        columns = line.strip().split("\t")

        # Update first column if it is chrC or chrM
        if columns[0] == "chrC":
            columns[0] = "ChrC"
        elif columns[0] == "chrM":
            columns[0] = "ChrM"

        attributes = columns[8]
        attributes_dict = dict(
            [attr.split("=") for attr in attributes.split(";") if "=" in attr]
        )

        if "ID" in attributes_dict:
            old_id = attributes_dict["ID"]

            if "gene" in columns[2]:
                # Update gene ID for chrC and chrM
                if columns[0] in ["ChrC", "ChrM"]:
                    chr_label = columns[0][-1]  # Extract C or M
                    gene_number = attributes_dict["Name"].split(".")[-1]
                    new_id = f"OsGG{chr_label}g{gene_number.zfill(5)}"
                else:
                    chr_number = re.search(r"Chr(\d+)", columns[0]).group(1)
                    gene_number = attributes_dict["Name"].split(".")[-1]
                    new_id = f"OsGG{chr_number.zfill(2)}g{gene_number.zfill(5)}"

                id_map[old_id] = new_id
                attributes_dict["ID"] = new_id
                attributes_dict["Name"] = new_id

            elif "mRNA" in columns[2]:
                # Update mRNA ID
                parent_id = attributes_dict["Parent"]
                if columns[0] in ["ChrC", "ChrM"]:
                    chr_label = columns[0][-1]  # Extract C or M
                    gene_number = attributes_dict["Name"].split(".")[-1]
                    base_id = f"OsGG{chr_label}g{gene_number.zfill(5)}"
                else:
                    chr_number = re.search(r"Chr(\d+)", columns[0]).group(1)
                    gene_number = attributes_dict["Name"].split(".")[-1]
                    base_id = f"OsGG{chr_number.zfill(2)}g{gene_number.zfill(5)}"

                # Add suffix only if there are multiple children
                if children_count[parent_id] > 1:
                    count = name_count.get(base_id, 0) + 1
                    name_count[base_id] = count
                    new_id = f"{base_id}.{count}"
                else:
                    new_id = base_id

                id_map[old_id] = new_id
                attributes_dict["ID"] = new_id
                attributes_dict["Parent"] = id_map.get(parent_id, parent_id)
                attributes_dict["Name"] = base_id

        elif "Parent" in attributes_dict:
            # Update Parent field for child features
            parent_id = attributes_dict["Parent"]
            attributes_dict["Parent"] = id_map.get(parent_id, parent_id)

        # Reconstruct the attributes column
        attributes = ";".join([f"{k}={v}" for k, v in attributes_dict.items()])
        columns[8] = attributes

        updated_lines.append("\t".join(columns))

    return updated_lines
    
# 파일 입출력 함수
def process_gff3_file(input_file, output_file):
    with open(input_file, 'r') as infile:
        input_lines = infile.readlines()

    # 업데이트 수행
    updated_lines = update_gff3_ids(input_lines)

    # 결과를 파일로 저장
    with open(output_file, 'w') as outfile:
        outfile.write("\n".join(updated_lines))

# 파일 경로 설정
input_file = "geumgang_new_clear_tidy_sort_add.gff3"  # 입력 파일 이름
output_file = "name_update.gff3"  # 출력 파일 이름

# 실행
process_gff3_file(input_file, output_file)

def update_mrna_ids(input_lines):
    updated_lines = []
    
    for line in input_lines:
        # 주석 또는 빈 줄은 그대로 유지
        if line.startswith("#") or not line.strip():
            updated_lines.append(line)
            continue

        fields = line.strip().split("\t")
        attributes = dict(attr.split("=") for attr in fields[8].split(";") if "=" in attr)
        feature_type = fields[2]

        if feature_type == "gene":
            # gene은 변경 없이 그대로 추가
            updated_lines.append(line)
        
        elif feature_type == "mRNA":
            # mRNA의 ID에서 "g"를 "t"로 변경
            attributes["ID"] = attributes["ID"].replace("g", "t")
            # Parent를 gene의 ID로 유지
            attributes["Parent"] = attributes["Parent"].replace("g", "t") if "Parent" in attributes else attributes["Parent"]
            fields[8] = ";".join(f"{k}={v}" for k, v in attributes.items())
            updated_lines.append("\t".join(fields))
        
        else:
            # 나머지 feature는 Parent 필드만 업데이트
            if "Parent" in attributes:
                attributes["Parent"] = attributes["Parent"].replace("g", "t")
            fields[8] = ";".join(f"{k}={v}" for k, v in attributes.items())
            updated_lines.append("\t".join(fields))
            
    # 빈 줄이나 None을 제거
    updated_lines = [line for line in updated_lines if line.strip()]

    return updated_lines

# 파일 입출력 처리
input_file = "name_update.gff3"  # 입력 파일 이름
output_file = "name_upupdate.gff3"  # 출력 파일 이름

# 입력 파일 읽기
with open(input_file, "r") as infile:
    input_gff3_lines = infile.readlines()

# 업데이트된 GFF3 라인 생성
updated_gff3_lines = update_mrna_ids(input_gff3_lines)

# 출력 파일 쓰기
with open(output_file, "w") as outfile:
    outfile.write("\n".join(updated_gff3_lines))

print(f"변경된 GFF3 파일이 {output_file}에 저장되었습니다.")


def update_gff3_ids(input_lines):
    updated_lines = []
    
    for line in input_lines:
        # 주석 또는 빈 줄은 그대로 유지
        if line.startswith("#") or not line.strip():
            updated_lines.append(line)
            continue

        fields = line.strip().split("\t")
        
        # 세 번째 필드가 "mRNA"인 경우만 처리
        if fields[2] == "mRNA":
            attributes = fields[8].split(";")
            
            if len(attributes) > 1:
                key, value = attributes[1].split("=")
                # 두 번째 항목의 값에서 7번째 문자가 't'인 경우만 변경
                if len(value) >= 7 and value[6] == "t":
                    value = value[:6] + "g" + value[7:]
                    attributes[1] = f"{key}={value}"
            
            fields[8] = ";".join(attributes)
        
        # 수정된 필드를 추가
        updated_lines.append("\t".join(fields))
    
    return updated_lines


# 파일 입출력 처리
input_file = "name_upupupdate.gff3"  # 입력 파일 이름
output_file = "name_upupupupupdate.gff3"  # 출력 파일 이름

# 입력 파일 읽기
with open(input_file, "r") as infile:
    input_gff3_lines = infile.readlines()

# 업데이트된 GFF3 라인 생성
updated_gff3_lines = update_gff3_ids(input_gff3_lines)

# 출력 파일 쓰기
with open(output_file, "w") as outfile:
    outfile.write("\n".join(updated_gff3_lines))

print(f"변경된 GFF3 파일이 {output_file}에 저장되었습니다.")

